generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum SyncStatus {
  OK
  ERROR
  AUTH_REQUIRED
}

//
// MODELS
//

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  picture         String?
  googleId        String           @unique

  // relations
  interests       UserInterest[]
  customInterests CustomInterest[]
  events          UserEvent[]
  calendarSync    CalendarSync?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([googleId])
}

model Interest {
  id       String          @id @default(cuid())
  category String
  child    String

  users    UserInterest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, child])
  @@index([category])
}

model UserInterest {
  id         String   @id @default(cuid())
  userId     String
  interestId String

  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  createdAt  DateTime @default(now())

  @@unique([userId, interestId])
  @@index([userId])
}

model CustomInterest {
  id     String @id @default(cuid())
  userId String
  name   String

  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, name])
  @@index([userId])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  location    String?
  platform    String?     
  link        String?
  startTime   DateTime
  endTime     DateTime?
  source      String?     // e.g. "gmail"
  sourceId    String?     // Gmail messageId for dedup/debug
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  users       UserEvent[]

  @@unique([title, startTime, location])
  @@index([startTime])
  @@index([sourceId])
}

model UserEvent {
  id      String @id @default(cuid())
  userId  String
  eventId String
  added   Boolean @default(true)

  user    User  @relation(fields: [userId], references: [id])
  event   Event @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model CalendarSync {
  id                 String     @id @default(cuid())
  userId             String     @unique
  lastProcessedDate  DateTime?  // Gmail internalDate cutoff
  lastCalendarUpdate DateTime?
  syncStatus         SyncStatus @default(OK)
  errorMessage       String?

  user               User       @relation(fields: [userId], references: [id])

  updatedAt          DateTime   @updatedAt
}
